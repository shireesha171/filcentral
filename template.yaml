AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS cloud-formation template for FileOps project

Globals:
  Function:
    Timeout: 28
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: true

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - devvv
      - qa
      - prod

  ManagedLayer:
    Type: String
    Description: "Aws managed layer for the Pandas lib"
    Default: "arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python310:7"
  EmailSenderId:
    Type: String
    Default: "keerthivasan.ramanathan@blumetra.com"
  EmailSenderCCId:
    Type: String
    Default: "devi.pinnamaneni@blumetra.com"
  S3FileStorage:
    Type: String
    Default: "filecentral-storage-new"

  PvtSubnet1:
    Type: String
    Default: "subnet-014586bf68f0cb2e2"
  PvtSubnet2:
    Type: String
    Default: "subnet-0372078f8abe273cb"
  Securitygroup:
    Type: String
    Default: "sg-01024fc78bd65ed77"
#prashanth
  OktaDomain:
    Type: String
    Default: "dev-87543225.okta.com"

  CognitoUserPoolId:
    Type: String
    Default: "us-east-1_yWq5YJssk"

  oktaPrefix:
    Type: String
    Default: "okta-provider_"
  corsDomain:
    Type: String
  redshiftPort:
    Type: String
    Default: "5439"

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub fileops-userpool-${Environment}
  FileopsLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub FileOps_Role-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - ses.amazonaws.com
                - sns.amazonaws.com
                - lambda.amazonaws.com
                - scheduler.amazonaws.com
                - events.amazonaws.com
                - s3.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: multiple_services_policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::filecentral-storage-new-${Environment}"
                  - !Sub "arn:aws:s3:::filecentral-storage-new-${Environment}/*"
              - Effect: "Allow"
                Action:
                  - "secretsmanager:*"
                Resource: '*'    
              - Effect: Allow
                Action:
                  - 'cognito-idp:*'
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "rds:*"
                Resource:
                  - !Sub "arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:filecentral-${Environment}"
              - Effect: "Allow"
                Action:
                  - "ecs:*"
                  - "ecs:RunTask"
                Resource:
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*"
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/filecentral-cluster-dev"
                  - !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/FileOps-data-profiling:2"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:CreateFunction"
                  - "lambda:UpdateFunctionCode"
                  - "lambda:GetFunction"
                  - "lambda:ListFunctions"
                  - "ses:*"  # Add SES full access here
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole-${Environment}"
              - Effect: "Allow"
                Action:
                  - "scheduler:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "events:PutRule"
                  - "events:PutTargets"
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - "sns:Subscribe"
                  - "sns:Publish"
                  - "sns:ListSubscriptionsByTopic"
                  - "sns:Unsubscribe"
                Resource: "*"
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: !Sub "arn:aws:iam::*:role/FileOps_Role-${Environment}"
                Condition:
                  StringLike:
                    iam:PassedToService: "events.amazonaws.com"
              - Effect: "Allow"
                Action: "iam:PassRole"
                Resource: !Sub "arn:aws:iam::*:role/FileOps_Role-${Environment}"
                Condition:
                  StringLike:
                    iam:PassedToService: "scheduler.amazonaws.com"
                
  ecsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecsTaskExecutionRole-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - s3.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
      Policies:
        - PolicyName: s3_policy_new
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::filecentral-storage-new-${Environment}"
                  - !Sub "arn:aws:s3:::filecentral-storage-new-${Environment}/*"
      
#  S3bucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: !Sub fileops-storage-${Environment}


  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub fileops-api-${Environment}
      Description: Api endpoints for the Fileops project
      StageName: !Sub ${Environment}
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: !Sub "'${corsDomain}'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false

        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            ProviderARNs: !Ref CognitoUserPool.Arn
            Identity:
              Header: Authorization


  fileopsBusinessProcess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-BusinessProcess/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-BusinessProcess-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /business-process
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup

      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsAnalyzeSchema:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-AnalyzeSchema/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-AnalyzeSchema-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/analyze-schema
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup

      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-Authentication/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-Authentication-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /auth
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

#  fileopsBusinessProcessSourceConfig:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: functions/fileops-BusinessProcessSourceConfig/
#      Handler: app.lambda_handler
#      Runtime: python3.10
#      FunctionName: !Sub fileops-BusinessProcessSourceConfig-${Environment}
#      Role: !GetAtt FileopsLambdaRole.Arn
#      Events:
#        ProxyApiRoot:
#          Type: Api
#          Properties:
#            RestApiId: !Ref ApiGatewayApi
#            Path: /job/final-save
#            Method: ANY
#      Layers:
#        - !Ref fileopsEssentialLayer
#        - arn:aws:lambda:us-east-2:336392948345:layer:AWSSDKPandas-Python310:4
#      Environment:
#        Variables:
#          Environment: !Ref Environment

  fileopsBusinessUserProcess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-BusinessUserProcess/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-BusinessUserProcess-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /validation-process
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsDataProfiling:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-DataProfiling/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-DataProfiling-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /data-profiling
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsDqRules:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-DqRules/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-DqRules-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/dq-rules
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsEmailNotification:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-EmailNotification/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-EmailNotification-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref fileopsJinja2Layer
      Environment:
        Variables:
          Environment: !Ref Environment
          Sender_id: !Ref EmailSenderId
          Sender_cc_id: !Ref EmailSenderCCId
          Region: !Sub ${AWS::Region}
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup

  fileopsErrorCodes:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-ErrorCodes/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-ErrorCodes-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /error-codes
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsGroups:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-Groups/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-Groups-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /groups
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsUsers:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-Users/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-Users-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /users
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          user_pool_id: !Ref CognitoUserPoolId
          okta_domain: !Ref OktaDomain
          Region: !Sub ${AWS::Region}
          okta_prefix: !Ref oktaPrefix

  fileopsFileUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-FileUpload/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-FileUpload-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job
            Method: ANY
        ProxyApiRoot2:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/file_upload
            Method: ANY
        ProxyApiRoot3:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /jira/upload
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsFinalSaveJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-FinalSaveJob/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-FinalSaveJob-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/final-save
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          Scheduler_Sns_Topic: !Ref FileopsSchedulerSnsTopic
          Email_Notification_Sns_Topic: !Ref FileopsEmailNotificationSnsTopic
          S3FileStorage: !Ref S3FileStorage
          Account: !Sub ${AWS::AccountId}

  fileopsJobRunDetails:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-JobRunDetails/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-JobRunDetails-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job-runs/job-run-details
            Method: ANY
        ProxyApiRoot2:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job-runs
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsJobsSchedule:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-JobsSchedule/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-JobsSchedule-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/schedule
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsLogs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-Logs/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-Logs-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job-runs/logs
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsPostSignup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-PostSignup/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-PostSignup-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        CognitoEvent:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger:
              - PreSignUp
              - PostAuthentication
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          Region: !Sub ${AWS::Region}
          user_pool_id: !Ref CognitoUserPoolId
          okta_prefix: !Ref oktaPrefix


  fileopsJobColumns:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-JobColumns/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-JobColumns-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/columns
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsSampleFileProcess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-SampleFileProcess/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-SampleFileProcess-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/sample-file-process
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsSourceFileConfig:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-SourceFileConfig/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-SourceFileConfig-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/configuration
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsSourceTargetConfig:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-SourceTargetConfig/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-SourceTargetConfig-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /source-target-config
            Method: ANY
        ProxyApiRoot2:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /source-target-config/list
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          Region: !Sub ${AWS::Region}

  fileopsTargetFileConfig:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-TargetFileConfig/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-TargetFileConfig-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: jobs/target-file-config
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsTargetTransformation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-TargetTransformation/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-TargetTransformation-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /job/transformation
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage

  fileopsGetList:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-GetList/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-GetList-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /list-items
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment

  fileopsValidationProcess:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-ValidationProcess/
      Handler: code.app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-ValidationProcess-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /file-validate
            Method: ANY
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer

      Environment:
        Variables:
          Environment: !Ref Environment
          S3FileStorage: !Ref S3FileStorage
          Account: !Sub ${AWS::AccountId}
          Region: !Sub ${AWS::Region}
          Email_Notification_Sns_Topic: !Ref FileopsEmailNotificationSnsTopic

  fileopsValidationProcessPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt fileopsValidationProcess.Arn
      Principal: s3.amazonaws.com
      SourceArn: arn:aws:s3:::*
      SourceAccount: !Sub ${AWS::AccountId}

  FileopsGenerateDataProfile:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/fileops-GenerateDataProfile/
      Handler: app.lambda_handler
      Runtime: python3.10
      Role: !GetAtt FileopsLambdaRole.Arn
      Layers:
        - !Ref fileopsEssentialLayer
      FunctionName: !Sub fileops-GenerateDataProfile-${Environment}
      Environment:
        Variables:
          Environment: !Ref Environment
          Account: !Sub ${AWS::AccountId}
          Region: !Sub ${AWS::Region}
          cluster_name: filecentral-cluster-dev
          container_name: Task-data-profile
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
  FileopsJobScheduler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-JobScheduler/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-JobScheduler-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Layers:
        - !Ref fileopsEssentialLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          Account: !Sub ${AWS::AccountId}
          Region: !Sub ${AWS::Region}
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup
  fileopsSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-Search/
      Handler: code.app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-Search-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /search
            Method: ANY
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          Account: !Sub ${AWS::AccountId}
          Region: !Sub ${AWS::Region}
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup

  fileopsRedshift:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-Redshift/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub fileops-Redshift-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /redshift/test-connection
            Method: ANY
      Layers:
        - !Ref fileopsEssentialLayer
        - !Ref ManagedLayer
      Environment:
        Variables:
          Environment: !Ref Environment
          Account: !Sub ${AWS::AccountId}
          Region: !Sub ${AWS::Region}
          RedshiftPort: !Ref redshiftPort
      #SK

  fileopsSnsTroubleshooting:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/fileops-SnsTroubleshooting/
      Handler: app.lambda_handler
      Runtime: python3.10
      FunctionName: !Sub sns-troubleshooting-lambda-${Environment}
      Role: !GetAtt FileopsLambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !Ref PvtSubnet1
          - !Ref PvtSubnet2
        SecurityGroupIds:
          - !Ref Securitygroup

  FileopsSNSDeliveringSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:SNS_Delivering
      Endpoint: !GetAtt fileopsSnsTroubleshooting.Arn

  FileopsFileConverter:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/fileops-fileconverter:latest"
      FunctionName: !Sub fileops-FileConverter-${Environment}
      Architectures: [ 'x86_64' ] 
      Role: !GetAtt FileopsLambdaRole.Arn
      Timeout: 900
      Environment:
        Variables:
          Environment: !Ref Environment
          Account: !Sub ${AWS::AccountId}
          Region: !Sub ${AWS::Region}
          S3FileStorage: !Ref S3FileStorage
      EventInvokeConfig:
        MaximumRetryAttempts: 0

  FileopsSchedulerSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: FileOps Job Schedule Topic
      TopicName: !Sub FileOps-job-schedule-topic-new-${Environment}
      Tags:
      - Key: Project
        Value: FileOps
      - Key: Owner
        Value: FileOpsUser
      - Key: Env
        Value: dev

  FileopsEmailNotificationSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: FileOps Email Notification Topic
      TopicName: !Sub FileOps-email-notification-topic-${Environment}
      Tags:
        - Key: Project
          Value: FileOps
        - Key: Owner
          Value: FileOpsUser
        - Key: Env
          Value: dev
        
  FileopsSchedulerSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref FileopsSchedulerSnsTopic
      Endpoint: !GetAtt FileopsJobScheduler.Arn

  FileopsEmailNotificationSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn: !Ref FileopsEmailNotificationSnsTopic
      Endpoint: !GetAtt fileopsEmailNotification.Arn

  FileopsSchedulerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt FileopsJobScheduler.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref FileopsSchedulerSnsTopic

  FileopsEmailNotificationLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt fileopsEmailNotification.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref FileopsEmailNotificationSnsTopic

  fileopsEssentialLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/fileops-essentials-layer/
      LayerName: !Sub fileops-essentials-${Environment}
      CompatibleRuntimes:
        - python3.10  
    Metadata:
      BuildMethod: python3.10  
      Variables:
         Region: !Sub ${AWS::Region} # Required to have AWS SAM build this layer

  fileopsJinja2Layer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/fileops-jinja2-layer/
      LayerName: !Sub fileops-jinja2-${Environment}
      CompatibleRuntimes:
        - python3.10
    Metadata:
      BuildMethod: python3.10   # Required to have AWS SAM build this layer

Outputs:
  Apigatewayoutput:
    Value: !GetAtt ApiGatewayApi.RootResourceId
